import sqlite3
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import openai

# ‚úÖ ÿßŸÑŸÖŸÅÿßÿ™Ÿäÿ≠ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ©
TELEGRAM_TOKEN = "8169930173:AAHDa8D6hbybO1rm9B13-6OxrX9gqAbwnlo"
OPENAI_API_KEY = "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"

openai.api_key = OPENAI_API_KEY

conn = sqlite3.connect("innerlights.db", check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS sessions (chat_id INTEGER PRIMARY KEY, history TEXT)''')
conn.commit()

def detect_language(text):
    spanish = ['hola', 'amor', 'energia', 'sanacion', 'luz']
    return 'es' if any(word in text.lower() for word in spanish) else 'en'

def build_prompt(lang, msg):
    if lang == 'es':
        return f"Eres InnerLights, un gu√≠a espiritual amable. Usuario dice: {msg}\nT√∫:"
    else:
        return f"You are InnerLights, a kind spiritual guide. User says: {msg}\nYou:"

async def respond(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_msg = update.message.text
    chat_id = update.message.chat_id
    lang = detect_language(user_msg)
    prompt = build_prompt(lang, user_msg)

    c.execute("SELECT history FROM sessions WHERE chat_id=?", (chat_id,))
    row = c.fetchone()
    history = row[0] if row else ""
    full_prompt = (history + "\n" + prompt)[-2000:]

    try:
        res = openai.Completion.create(
            engine="text-davinci-003",
            prompt=full_prompt,
            max_tokens=150,
            temperature=0.7,
        )
        reply = res.choices[0].text.strip()
    except Exception:
        reply = "üåÄ Sorry, I am having trouble connecting."

    new_history = (history + f"\nUser: {user_msg}\nInnerLights: {reply}")[-2000:]
    c.execute("REPLACE INTO sessions (chat_id, history) VALUES (?, ?)", (chat_id, new_history))
    conn.commit()

    await update.message.reply_text(reply)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üåü Welcome to InnerLights! Speak to me in English or Spanish.")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), respond))
    print("üßò InnerLights Bot is running...")
    app.run_polling()
